1) Список використаних команд:
  499 pwd
  500  mkdir test
  501  cd test
  502  echo it is test > README.md
  503  mkdir project
  504  cp README.md project/
  505  rm README.md
  506  ls
  507  cd project
  508  touch index.html
  509  mkdir style
  510  cd style
  511  touch style.css
  512  cd ..
  513  mkdir css
  514  cd style
  515  mv style.css ../css
  516  ls
  517  cd ..
  518  rm -r style
  519  clear
  520  ls
  521  history 20
  522  history 24

-----------------------------------------------------------------------------------------------------------------

2) ln -s index.html test.html - створює символьну ссилку test.html на файл index.html

   ln index.html ../test.html - створює жорстку ссилку test.html в зовнішній папці на файл index.html

   В мене на windows 7, різниця тільки в тому, що при створені жорсткої ссилки на файл, при редагуванні файлу,
   міняються і вивід файлу по ссилці. При символьній ссилці, файл і ссилка поводять себе як окремі 
   незалежні файли. Видаляються файли, як зазвичай, навіть якщо на них йде жорстка ссилка, 
   при цьому ссилки залишаються "?" Якщо видалити ссилку жорстку чи символьну, то файл залишається.
   P.S. Читав, що файл не має видалятися, якщо на нього йде хоч одна жорстка ссилка, вмене чомусь не так.

-----------------------------------------------------------------------------------------------------------------

3) Аліас на команду  history 20:

	alias hh="history 20" - hh - виводить 20 останніх команд.

-----------------------------------------------------------------------------------------------------------------

4) history | wc -l - ця команда виведе кількість команд, які зберігаються в пам'яті. Спочатку запускається
 команда history, результат якої передається команді wc -l, яка виводить кількість строк, 
 виданою попередньою командою - відповідно кількість команд.
	
-----------------------------------------------------------------------------------------------------------------

5) stdin - ввід даних.
   stdout - вивід даних.
   stderr - вивід помилок.

   history | wc -l - перенаправляє history в команду wc -l

   echo Hello > test.txt - перенаправляє текст Hello з екрану в файл test.txt

   echo "Hello world" | tee file-1.txt file-2.txt - направляє текст Hello world в 2-ва файли і виведе на екран.

   ls -l > list.txt - перенаправляє команду ls -l в файл list.txt (записує список файлів і папок)

   sl 2> errors.txt - записує помилки в errors.txt (bash: sl: command not found), де 2 -  стандартний номер 
   					  потоку помилок в stderr.

   find -name "*.txt" | grep -r found - перенаправить команду find -name "*.txt" на команду grep -r found.
    					Виведе	тільки файли з розширенням txt, де є текст found.

   sed '/^$/d' text-1.txt > text-2.txt - sed видалить всі пусті строки з тексту файлу text-1.txt і направляє в text-2.txt

   ls -l | awk '{ x += $5 } ; END { print "total bytes: " x }' - ls -l отримує список файлів і папок в даній
   директорії і перенаправляє в awk, якмй підрахує і виведе кількість байт, які займають файли в даній директорії.

-----------------------------------------------------------------------------------------------------------------

6) Команди find:

	find ./test-1/text.txt - пошук по шляху.
	find -name "*.txt" - пошук по імені.
	find -empty - шукає пусті файли.
	find -ls -name "*.txt" - виводить розширений список, аналогічний команді ls -l
	find . -size -20c - шукає файли, які за розміром менші 20 байт.
	find . -size +20k - шукає файли, які за розміром більші 20 кілобайт.
	find . -size +20c -size -20k - шукає файли, які за розміром більші 20 байт, але менші 20 кілобайт.

-----------------------------------------------------------------------------------------------------------------

	Команди grep:

	grep "found" ./test/grep-errors.txt - шукає строки з текстом found в файлі grep-errors.txt
	grep -r wrapper * - шукає рекурсивно файли, які мають текст wrapper в цій папці і її підкаталогах.
	grep -v "found" ./test/text.txt - виведе ті строки, які не містять found.
	grep -l "table" ./project/*.html - виведе список файлів, де зустрічається текст table.
	grep -w "\Hello" ./test/*.txt - шукає строки які починаються на Hello.

-----------------------------------------------------------------------------------------------------------------

	Команди sed:

	sed '/^$/d' text.txt - видалить пусті строки в файлі, при виводі.
	sed -e '1d' text.txt - видалить 1-шу строку, при виводі.
	sed -e '/Hello/d' text.txt - видалить всі строки, які містять Hello
	sed -e 's/Hello//g' text.txt - видалить тільки сам текст Hello, все інше буде без змін.
	sed 's/change-1/change-2/g' text.txt - міняє строку change-1 на change-2
	sed -n '3p;3q' text.txt - виведе 3-тю строку
	sed -n '1,3p;3q' text.txt - виведе перші три строки
	sed -n '3,7p' text.txt - виведе строки з 3-ї по 7-му.
	sed -e 's/ */-/g' text.txt - виведе тире ("-") між кожним символом.
	sed -e 's/00*/0/g' text.txt - замінить послідовність любої кількості нулів, одним нулем.
	sed -e 's/ *$//' text.txt - видалить всі пробіли в кінці строк.
	sed -e '/ *#/d; /^$/d' text.txt - видалить пусті строки і коментарі (якщо вони починаються на #)

	-e - означає, що далі йде інструкція, необов'язковий при передачі однієї інструкції.
	-n дозволяє sed виводити тільки ті строки, які співпадають з вказаним шаблоном.
	d - видалення
	s - заміна
	'' - в лапках передаються інструкції
	; - розділяє інструкції.

-----------------------------------------------------------------------------------------------------------------

	Команди awk:

	awk 'NR % 2 == 0' text.txt - виводить тільки парні строки файлу text.txt. (NR - номер строки, якщо ділиться 
								 на 2 без остатку то відповідно виводиться)

	awk '{ if (length($0) > max) max = length($0) } END { print max }' text.txt - виведе довжину самої довшої строки.
	(перевіряє довжину кожної строки і якщо вона більша за попередні, то присвоює змінній max і потім виводить її)

	awk 'length($0) > 20' text.txt - виводить всі строки, які мають більше 20-ти символів.

	awk 'NF > 0' text.txt - виводить всі строки, які не є пусті.

	awk 'BEGIN { for (i = 1; i <= 7; i++) print int(101 * rand()) }' - виводить сім випадкових чисел від 0 до 100.

	awk 'END { print NR }' text.txt - виводить кількість строк в файлі.

-----------------------------------------------------------------------------------------------------------------

	Команда sort:

	sort - виводить вміст файлу, перед тим відсортовуючи його по строках.

	sort test-1.txt text-2.txt - виведе відсортований вміст двох файлів.

	sort -r test-1.txt text-2.txt - виведе відсортований вміст двох файлів, в зворотньому порядку.

	sort -k 2 test.txt - відсортує строки по 2-ій колонці.

	sort test-1.txt text-2.txt | uniq - виведе відсортований вміст двох файлів, якщо якась строка повторюється,
										то її виведе тільки раз.

	sort test-1.txt text-2.txt | uniq -u - виведе відсортований вміст двох файлів, якщо якісь строки повторюється,
										то їх невідображатиме взагалі.

	sort test-1.txt text-2.txt | uniq -d - виведе відсортовані строки файлів, але тільки ті що повторюється.

-----------------------------------------------------------------------------------------------------------------

7) Команда gzip:

gzip test.txt - архівує (зжимає розмір) файл test.txt, при цьому вхідний файл видаляється і створюється новий
				 text.txt.gz 

gzip -l test.txt.gz - виводить степінь стиснення і розмір файлу, атакож ім'я і розмір до архівації.

gzip index.html style.css - заархівує два файли.

gzip -r file.txt task-2 - заархівує файл file.txt і всі файли в папці task-2

gunzip text.txt.gz - розпаковує файл вертаючи йому ім'я до архівації.

gunzip -r file.txt test-1 - розпакує файл file.txt і всі файли в папці task-2

